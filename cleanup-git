#!/bin/bash

LOCAL_ONLY=false
if [[ "$1" == "--local-only" ]]; then
	LOCAL_ONLY=true
fi

# Branches we don't want to remove
keep_branches=("develop" "staging" "master" "development" "deploy")
branches_to_remove=()

function safe_exit {
	printf "Doing nothing and safely exiting.\n"
	exit 0
}

function exit_with_error {
	echo $1
	exit 1
}

function do_removal {
	while read response; do
		case $response in
			"Y") break ;;
			"N") safe_exit ;;
			*) printf "Incorrect answer. Please select either Y(es) or N(o): "	;;
		esac
	done

	for branch in "${branches_to_remove[@]}"; do

		if [[ "$LOCAL_ONLY" = false ]]; then
			printf "\n================================================================================"
			printf "\nDeleting branch '$branch' from remote:"
			printf "\n================================================================================"
			printf "\n"
			git push --delete origin $branch
		fi

		printf "\n================================================================================"
		printf "\nDeleting branch '$branch' locally:"
		printf "\n================================================================================"
		printf "\n"
		git branch -d $branch

	done

	printf "\n================================================================================"
	printf "\nPruning origin after removing '$branch' branch:"
	printf "\n================================================================================"
	printf "\n"
	git remote prune origin

	exit 0
}

current_branch=`git rev-parse --abbrev-ref HEAD`
if [[ $current_branch != "master" ]]; then
	exit_with_error "You need to have MASTER checked out to use this script"
else
	# Get the latest from master so its on sync with the local
	echo "Getting latest version for MASTER"
	git pull origin master

	if [[ "$LOCAL_ONLY" = false ]]; then
		# Fetch all remote branches so we can remove those which are in sync too
		echo "Fetching remote branches now"
		git fetch
	fi
fi


if [[ "$LOCAL_ONLY" = true ]]; then
	printf "\n================================================================================"
	printf "\nTHE FOLLOWING BRANCHES HAVE BEEN ALREADY MERGED AND WILL BE REMOVED LOCALLY:"
	printf "\n================================================================================"
	printf "\n"
else
	printf "\n================================================================================"
	printf "\nTHE FOLLOWING BRANCHES HAVE BEEN ALREADY MERGED AND WILL BE REMOVED BOTH LOCALLY"
	printf "\nAND FROM THE REMOTE!:"
	printf "\n================================================================================"
	printf "\n"
fi

while IFS= read -r branch
do
	trimmed=`echo $branch | xargs`

	exist=0
	for keep in "${keep_branches[@]}"; do
		if [[ $keep == $trimmed ]]; then
			exist=1
			break
		fi
	done

	if [[ $exist -ne 1 ]]; then
		echo "$trimmed"
    	branches_to_remove+=("$trimmed")
	fi
done < <(git branch --merged | grep -v "\*")

if [[ "$LOCAL_ONLY" = true ]]; then
	printf "\nAre you sure you want to remove the above branches locally? Y/N? (then press [ENTER]): "
else
	printf "\nAre you sure you want to remove the above branches (both locally and remote)? Y/N? (then press [ENTER]): "
fi


do_removal

